name: AnthropicApiTests

on:
  workflow_dispatch: # Manual trigger only

jobs:
  # =============================================================================

  CheckPermissions:
    runs-on: ubuntu-latest
    outputs:
      has-permission: ${{ steps.check.outputs.has-permission }}

    steps:
      - name: Check if actor has maintainer permissions
        id: check
        run: |
          # Get the repository collaborator permission level using GitHub API
          PERMISSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission" \
            | jq -r '.permission')

          # Check if permission level is sufficient (admin, maintain, or write)
          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "maintain" || "$PERMISSION" == "write" ]]; then
            echo "has-permission=true" >> $GITHUB_OUTPUT
          else
            echo "has-permission=false" >> $GITHUB_OUTPUT
          fi

          echo "Actor: ${{ github.actor }}, Permission: $PERMISSION"

  # =============================================================================

  TestAnthropicApi:
    needs: CheckPermissions
    if: needs.CheckPermissions.outputs.has-permission == 'true'

    env:
      FORCE_COLOR: true

    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: sis-api-access  # Named environment containing your API keys

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      # -----------------------------------------------------------------------------

      # Set up pip

      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install -U pip # to ensure version > 20 to have cache dir
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Pip Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-tests-ubuntu-${{ steps.full-python-version.outputs.version }}

      # -----------------------------------------------------------------------------

      # Upgrade pip and setuptools, and install poetry

      - name: Upgrade pip and setuptools
        run: |
          pip install --upgrade pip setuptools

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.4
        with:
          version: 1.8.5
          virtualenvs-create: true

      # -----------------------------------------------------------------------------

      # Set up Poetry

      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Poetry Cache
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: .venv
          key: venv-tests-ubuntu-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      # This is from <https://github.com/python-poetry/poetry/blob/639d5e057/.github/workflows/main.yml#L57-L60>
      - name: Ensure cache is healthy
        if: steps.poetry-cache.outputs.cache-hit == 'true'
        shell: bash
        run: |
          timeout 10s poetry run pip --version || rm -rf .venv

      # -----------------------------------------------------------------------------

      ## Install with Tests Environment

      - name: Install a tests environment
        run: |
          poetry install -E tests -E dicom

      # -----------------------------------------------------------------------------

      # PyMedPhys Data Cache

      - name: Get PyMedPhys cache directory
        id: pymedphys-cache-location
        run: |
          echo "::set-output name=dir::$(poetry run python -c 'import pymedphys._config as cf; print(str(cf.get_config_dir()))')"

      - name: PyMedPhys Cache
        id: pymedphys-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pymedphys-cache-location.outputs.dir }}
          key: pymedphys-tests-ubuntu-${{ hashFiles('**/hashes.json') }}

      # -----------------------------------------------------------------------------

      # TESTS

      - name: Run Anthropic API tests
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          poetry run pymedphys dev tests -v --anthropic
